<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.FromBottom">ReunionLog Data App</Heading>
<Lead Margin="Margin.Is4.OnY">
	This webpage is a service created with the guild <code>New Reunion</code> to get specific data from <Anchor To="https://warcraftlogs.com" Target="Target.Blank">warcraftlogs</Anchor>.
</Lead>

<!--https://getbootstrap.com/docs/5.0/getting-started/introduction/-->
<!--https://github.com/Blazored/SessionStorage-->

<!--<Page Title="GraphQL Search">-->

<h3>Upload Client Credentials</h3>
<InputFile OnChange="HandleClientCredentialsUpload" />
<p>Upload a .json file containing your client credentials.</p>

<h3>GraphQL Query</h3>
<div class="mb-4">
    <label for="query" class="form-label">Enter GraphQL Query:</label>
    <InputTextArea id="query" @bind-Value="GraphQLQuery" class="form-control" style="height: 300px;" />
</div>

<h3>GraphQL Variables</h3>
<div class="mb-4">
    <label for="variables" class="form-label">Enter GraphQL Variables (JSON format):</label>
    <InputTextArea id="variables" @bind-Value="GraphQLVariables" class="form-control" style="height: 300px;" />
</div>

<button class="btn btn-primary" @onclick="SubmitGraphQLQuery">Submit Query</button>



<h3>Result</h3>
<div class="result-container">
    <p>@QueryResult</p>
</div>

@code {
	@using Nickgismokato.Client.Components.ReunionApp;
    @using System.Text;
    private string GraphQLQuery { get; set; } = string.Empty;
    private string GraphQLVariables { get; set; } = string.Empty;
    private string QueryResult = "No result has been recorded, yet";
    private string _credentialsFilePath = "data/client_credentials.json";
    private ReunionLog reunionLog = new ReunionLog();

    private async Task HandleClientCredentialsUpload(InputFileChangeEventArgs e){
        var uploadedFile = e.File;
        if (uploadedFile != null){
            using (var stream = uploadedFile.OpenReadStream()){
                try{
                    await reunionLog.SaveClientCredentials(stream);
                    System.Console.WriteLine("File uploaded and saved.");
                }catch (Exception ex){
                    System.Console.WriteLine($"Error uploading file: {ex.Message}");
                }
            }
        }else{
            System.Console.WriteLine("No file selected.");
        }
    }

    private async Task SubmitGraphQLQuery(){
        try{
            // Validate inputs
            if (string.IsNullOrWhiteSpace(GraphQLQuery)){
                Console.WriteLine("Error: Query is required.");
                return;
            }

            // Call the back-end service to execute the query
            string tokenURL = "https://www.warcraftlogs.com/oauth/token";
            string credentialsFilePath = "data/client_credentials.json";

            // Read credentials from file
            if (!File.Exists(credentialsFilePath)){
                Console.WriteLine("Error: client_credentials.json file not found.");
                return;
            }

            var jsonContent = await File.ReadAllTextAsync(credentialsFilePath);
            var credentials = Newtonsoft.Json.JsonConvert.DeserializeObject<ClientCredentials>(jsonContent);
            if (credentials == null || string.IsNullOrEmpty(credentials.ClientId) || string.IsNullOrEmpty(credentials.ClientSecret)){
                Console.WriteLine("Error: Invalid credentials in client_credentials.json.");
                return;
            }

            string token = await reunionLog.GetAccessToken(tokenURL, credentials.ClientId, credentials.ClientSecret);

            if (string.IsNullOrEmpty(token)){
                Console.WriteLine("Error: Failed to retrieve access token.");
                return;
            }

            // Execute the GraphQL query
            string graphqlEndpoint = "https://www.warcraftlogs.com/api/v2/client";
            string result = await reunionLog.ExecuteGraphQLQuery(graphqlEndpoint, GraphQLQuery, GraphQLVariables, token);
            QueryResult = result;
            Console.WriteLine($"GraphQL Query Result: {result}");
        }catch (Exception ex){
            Console.WriteLine($"Error in SubmitGraphQLQuery: {ex.Message}");
        }
    }
    // Class to map client credentials
    public class ClientCredentials{
        [Newtonsoft.Json.JsonProperty("client_id")]
        public string ClientId { get; set; } = string.Empty;

        [Newtonsoft.Json.JsonProperty("client_secret")]
        public string ClientSecret { get; set; } = string.Empty;
    }


}
